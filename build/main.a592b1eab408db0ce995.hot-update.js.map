{"version":3,"file":"main.a592b1eab408db0ce995.hot-update.js","sources":["webpack:///./src/server.js"],"sourcesContent":["import { StaticRouter, matchPath } from 'react-router-dom';\n\nimport React from 'react';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport App from './App';\nimport routes from './routes';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    // This data fetching technique came from a gist by @ryanflorence\n    // @see https://gist.github.com/ryanflorence/efbe562332d4f1cc9331202669763741\n\n    // First we iterate through our top level routes\n    // looking for matches against the current url.\n    const matches = routes.map((route, index) => {\n      const match = matchPath(req.url, route.path, route);\n      // We then look for static getInitialData function on each top level component\n      if (match) {\n        const obj = {\n          route,\n          match,\n          promise: route.component.getInitialData ? route.component.getInitialData({ match, req, res }) : Promise.resolve(null),\n        };\n        return obj;\n      }\n      return null;\n    });\n\n    if (matches.length === 0) {\n      res.status(404).send('Not Found');\n    }\n\n    // Now we pull out all the promises we found into an array.\n    const promises = matches.map(match => (match ? match.promise : null));\n\n    // We block rendering until all promises have resolved\n    Promise.all(promises)\n      .then(data => {\n        const context = {};\n\n        // Pass our routes and data array to our App component\n        const markup = renderToString(\n          <StaticRouter context={context} location={req.url}>\n            <App routes={routes} initialData={data} />\n          </StaticRouter>\n        );\n\n        if (context.url) {\n          res.redirect(context.url);\n        } else {\n          res.status(context.statusCode || 200).send(\n            `<!doctype html>\n          <html lang=\"\">\n          <head>\n              <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n              <meta charSet='utf-8' />\n              <title>Welcome to Razzle</title>\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n              ${assets.client.css ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">` : ''}\n              <script src=\"${assets.client.js}\" defer></script>\n          </head>\n          <body> \n              <div id=\"root\">${markup}</div>\n              <script>window._INITIAL_DATA_ = ${JSON.stringify(data)};</script>\n          </body>\n      </html>`\n          );\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        res.status(500).json({ error: error.message, stack: error.stack });\n      });\n  });\n\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAiBA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;A","sourceRoot":""}